<?php//函数库文件/** * 文件上传函数 * @param array $upfile 上传文件信息,如：$_FILES['pic']; * @param string $path  上传文件保存路径， * @param array $typelist 允许上传文件类型，默认空数组表示不限 * 		如：array("image/jpg","image/jpeg","image/gif","image/png"); //允许的上传文件类型 * @param int $maxsize 允许上传文件大小，0表示不限制 * @return array 返回数组，其中下标error(布尔值)表示是否成功、info失败表示错误信息，成功表示上传的文件名 */function uploadfile($upfile,$path,$typelist=array(),$maxsize=0){	//1. 定义一个返回结果	$res=array("error"=>false,"info"=>"");	//2.判断上传错误信息	if($upfile['error']>0){		switch($upfile['error']){			case 1: $info="上传的文件超过了php.ini中限制的值"; break;			case 2: $info="上传文件的大小超过了HTML表单中 MAX_FILE_SIZE 选项指定的值"; break;			case 3: $info="文件只有部分被上传"; break;			case 4: $info="没有文件上传"; break;			case 6: $info="找不到临时文件夹"; break;			case 7: $info="临时文件写入失败"; break;			default: $info="未知错误！"; break;		}		$res['info']=$info;		return $res;	}	//3.判断上传文件类型(可选)	if(count($typelist)>0 && !in_array($upfile['type'],$typelist)){		$res['info']="上传文件类型错误：".$upfile['type'];		return $res;	}	//4.判断上传文件大小(可选)	if($maxsize>0 && $upfile['size']>$maxsize){		$res['info']="上传文件大小超出！";		return $res;	}	//5.处理上传的文件名	$ext = pathinfo($upfile['name'],PATHINFO_EXTENSION);//获取上传文件的后缀名	do{	//随机一个文件名并判断是否已存在。		$filename = time().rand(10000,99999).".".$ext;	}while(file_exists($path."/".$filename));	//6.判断并执行文件上传	 //判断是否是有效的上传文件	if(is_uploaded_file($upfile['tmp_name'])){		//执行文件上传处理，并判断是否成功		if(move_uploaded_file($upfile['tmp_name'],$path."/".$filename)){			$res['info']=$filename;			$res['error']=true;		}else{			$res['info']="上传文件失败！";		}	}else{		$res['info']='无效上传文件！';	}	return $res;}/** * 图片等比缩放函数 * @param string $picname 被缩放的图片名称。 如："a.jpg" * @param string $path 被缩放图片的存放路径。如："uploads/images"目录 * @param string $prix 缩放后图片名的前缀名。默认为: "s_" * @param int $maxwidth 缩放后的最大宽 * @param int $maxheight 缩放后最大的高 * @return 无返回值 */ function updateImage($picname,$path,$prix="s_",$maxwidth=100,$maxheight=100){	//1. 定义获取基本信息	$path = rtrim($path,"/"); //去除后面多余的"/"	$info = getimagesize($path."/".$picname);  //获取图片文件的属性信息	$width = $info[0]; //原图片的宽度	$height = $info[1]; //原图片的高度	//2. 计算压缩后的尺寸	if(($maxwidth/$width)<($maxheight/$height)){		$w=$maxwidth;//新图片的宽度		$h=($maxwidth/$width)*$height;//新图片的高度	}else{		$h=$maxheight;//新图片的宽度		$w=($maxheight/$height)*$width;//新图片的高度	}	//3. 创建图像源	$newim =imagecreateTrueColor($w,$h); //新图片源	//根据原图片类型来创建图片源	switch($info[2]){		case 1: //gif格式			$srcim = imageCreateFromgif($path."/".$picname);			break;		case 2: //jpeg格式			$srcim = imageCreateFromjpeg($path."/".$picname);			break;		case 3: //png格式			$srcim = imageCreateFrompng($path."/".$picname);			break;		default:			exit("无效的图片格式!");			break;	}	//4. 执行缩放处理	imagecopyresized($newim,$srcim,0,0,0,0,$w,$h,$width,$height);	//5. 输出保存绘画	//header("Content-Type:".$info['mime']); //设置响应类型为图片格式	//根据原图片类型来保存新图片	switch($info[2]){		case 1: //gif格式			imagegif($newim,$path."/".$prix.$picname); //保存			//imagegif($newim);//输出			break;		case 2: //jpeg格式			imagejpeg($newim,$path."/".$prix.$picname);			//imagejpeg($newim);			break;		case 3: //png格式			imagepng($newim,$path."/".$prix.$picname);			//imagepng($newim);			break;	}	//6. 销毁资源	imageDestroy($newim);	imageDestroy($srcim);}